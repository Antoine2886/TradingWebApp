@using Bd.Enums
@model IEnumerable<Bd.Infrastructure.Post>

<div class="container mt-4">
    @if (Model == null || !Model.Any())
    {
        <p class="text-center">No posts available.</p>
    }
    else
    {
        <div class="row" id="posts-container">
            @foreach (var post in Model)
            {
                <div class="post-item col-md-6 mb-4">
                    <a href="@Url.Action("Details", "Community", new { id = post.Id })" class="post-link" target="_blank">
                        <div class="post card">
                            <div class="card-body">

                            @if (post.Stock != null && post.Type != null)
                            {
                                <div class="position-absolute top-0 end-0 m-3">
                                    @if (post.Type == PostType.Long)
                                    {
                                        <img src="/images/icons/greenArrow.svg" alt="Long" class="post-icon" />
                                    }
                                    else if (post.Type == PostType.Short)
                                    {
                                        <img src="/images/icons/redArrow.svg" alt="Short" class="post-icon short-arrow" />

                                    }
                                </div>
                            }
                            <h2 class="card-title">@post.Title</h2>
                            <p style="margin-bottom:20px" class="card-text post-content">@post.Content</p>
  
                             @if (post.Stock != null)
                            {
                                <div class="position-absolute bottom-0 end-0 m-3">
                                        <span style="margin-right:10px">@post.Stock.Name</span>
                                        <button type="button" class="like-button @(post.Likes.Any(l => l.UserId == l.User.Id) ? "filled" : "unfilled")" data-post-id="@post.Id">
                                            <img src="@(post.Likes.Any(l => l.UserId == l.User.Id) ? "/images/icons/fill-owl.svg" : "/images/icons/unfill-owl.svg")" alt="Like" id="likes-icon-@post.Id" />
                                            <span class="text-info2" id="likes-count-@post.Id">@post.Likes.Count()</span>
                                        </button>


                                </div>
                            }
                            @if (post.User != null)
                            {
                                <div class="">

                                    <p class="card-text">
                                        <span class="text-muted">By @post.User.VisibleName</span>
                                        <br />
                                        <span class="text-muted created-at" data-created-at="@post.CreatedAt"> </span>
                                    </p>

                                </div>
                            }

                            </div>
                        </div>
                    </a>

                </div>
            }
        </div>
    }
</div>

<style>
    .btn-info {
        background-color: #17a2b8;
        border-color: #17a2b8;
    }

    .btn-outline-info {
        color: #17a2b8;
        border-color: #17a2b8;
    }

        .btn-info:hover, .btn-outline-info:hover {
            background-color: #138496;
            border-color: #138496;
        }
    .post-link {
        text-decoration: none;
        color: inherit;
    }

    .like-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 0;
    }

        .like-button img {
            width: 24px;
            height: 24px;
        }

        .like-button.filled img {
            content: url('/images/icons/fill-owl.svg');
        }

        .like-button.unfilled img {
            content: url('/images/icons/unfill-owl.svg');
        }

    .post-link:hover {
        text-decoration: none;
        color: inherit;
    }

    .post.card {
        background: #1e1e28;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: box-shadow 0.3s, transform 0.3s;
        padding: 20px;
    }

    .post.card:hover {
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        transform: translateY(-5px);
    }

    .card-body {
        padding: 20px;
    }

    .card-title {
        font-family: 'Montserrat', sans-serif;
        font-size: 1.75rem;
        margin-bottom: 10px;
        color: #f5f5f5;
        font-weight: bold; /* Emphasize the title */
    }

    .post-content {
        margin-bottom: 30px; /* Increase space between content and created-at */
    }
    .card-text {
        font-family: 'Montserrat', sans-serif;
        font-size: 0.875rem; /* Smaller font size for content */
        color: #f5f5f5; /* Lighter color for better contrast */
    }


    .text-muted {
        color: #999;
    }

    .text-info2 {
        color: #f5f5f5;
        margin-top: 0; /* Remove top margin */
    }

    .text-center {
        text-align: center;
        margin-top: 20px;
    }

    .post h2 a {
        text-decoration: none;
        color: #007bff;
    }

    .post h2 a:hover {
        text-decoration: underline;
        color: #0056b3;
    }

    .post a.text-info {
        text-decoration: none;
        color: #0056b3;
    }


        .post a.text-info:hover {
            text-decoration: underline;
            color: #003f7f;
        }

    .post-icon {
        width: 50px;
        height: 50px;
        position: absolute;
        top: 10px;
        right: 10px;
    }

    .position-absolute.bottom-0.start-0.m-3 {
        margin-bottom: 5px; /* Decrease space between "By" and created-at */
    }
</style>
